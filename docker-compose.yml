services:
  nginx:
    image: nginx:1.23.3-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    restart: always

  app:
    build: .
    command: sh /app/entrypoint.sh
    # Le port 8000 n'est plus exposé à l'extérieur, seul NGINX y a accès.
    # ports:
    #   - "8000:8000"
    environment:
      PYTHONPATH: /app
      DJANGO_SETTINGS_MODULE: config.settings
      # Forcer l'utilisation de SQLite au lieu de PostgreSQL
      DATABASE_URL: sqlite:///db.sqlite3
    volumes:
      - .:/app

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - app

  grafana:
    image: grafana/grafana:9.5.3
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # Event Store (read-only API on Redis Streams)
  event-store:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./lab7/event_store:/app
      - ./requirements.txt:/requirements.txt
    command: sh -c "pip install --no-cache-dir flask redis && flask --app app:app run --host=0.0.0.0 --port=7010"
    ports:
      - "7010:7010"
    depends_on:
      - redis
    restart: unless-stopped

  notification-worker:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - METRICS_PORT=9100
    volumes:
      - ./lab7:/app/lab7
    command: sh -c "pip install --no-cache-dir redis prometheus_client && python /app/lab7/consumers/notification_worker.py"
    depends_on:
      - redis
    restart: unless-stopped

  audit-worker:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - METRICS_PORT=9101
    volumes:
      - ./lab7:/app/lab7
    command: sh -c "pip install --no-cache-dir redis prometheus_client && python /app/lab7/consumers/audit_worker.py"
    depends_on:
      - redis
    restart: unless-stopped

  cqrs-projection-worker:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - METRICS_PORT=9105
    volumes:
      - ./lab7:/app/lab7
    command: sh -c "pip install --no-cache-dir redis prometheus_client && python /app/lab7/consumers/cqrs_projection_worker.py"
    depends_on:
      - redis
    restart: unless-stopped

  # Workers de chorégraphie (lancés manuellement ou via docker-compose si souhaité)
  stock-reservation-worker:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - KONG_URL=http://kong:8000
      - API_KEY=magasin-secret-key-2025
      - METRICS_PORT=9102
    volumes:
      - ./lab7:/app/lab7
    command: sh -c "pip install --no-cache-dir redis requests prometheus_client && python /app/lab7/consumers/stock_reservation_worker.py"
    depends_on:
      - redis
      - kong
    restart: unless-stopped

  order-creation-worker:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - KONG_URL=http://kong:8000
      - API_KEY=magasin-secret-key-2025
      - METRICS_PORT=9103
    volumes:
      - ./lab7:/app/lab7
    command: sh -c "pip install --no-cache-dir redis requests prometheus_client && python /app/lab7/consumers/order_creation_worker.py"
    depends_on:
      - redis
      - kong
    restart: unless-stopped

  stock-compensation-worker:
    image: python:3.12-slim
    working_dir: /app
    environment:
      - PYTHONPATH=/app
      - REDIS_URL=redis://redis:6379/0
      - KONG_URL=http://kong:8000
      - API_KEY=magasin-secret-key-2025
      - METRICS_PORT=9104
    volumes:
      - ./lab7:/app/lab7
    command: sh -c "pip install --no-cache-dir redis requests prometheus_client && python /app/lab7/consumers/stock_compensation_worker.py"
    depends_on:
      - redis
      - kong
    restart: unless-stopped

  produits-db:
    image: postgres:15
    environment:
      POSTGRES_DB: produits_db
      POSTGRES_USER: produits_user
      POSTGRES_PASSWORD: produits_pass
    ports:
      - "5434:5432"
    volumes:
      - produits_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "produits_user", "-d", "produits_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  catalogue-service-1:
    build: ./service-catalogue
    ports:
      - "8001:8000"
    networks:
      default:
        aliases:
          - catalogue-service
    environment:
      POSTGRES_DB: produits_db
      POSTGRES_USER: produits_user
      POSTGRES_PASSWORD: produits_pass
      POSTGRES_HOST: produits-db
      POSTGRES_PORT: 5432
      INSTANCE_ID: catalogue-1
    depends_on:
      produits-db:
        condition: service_healthy
    volumes:
      - ./service-catalogue:/app
    command: >
      sh -c "python manage.py migrate &&
             python load_data.py &&
             python manage.py runserver 0.0.0.0:8000"

  catalogue-service-2:
    build: ./service-catalogue
    ports:
      - "8006:8000"
    environment:
      POSTGRES_DB: produits_db
      POSTGRES_USER: produits_user
      POSTGRES_PASSWORD: produits_pass
      POSTGRES_HOST: produits-db
      POSTGRES_PORT: 5432
      INSTANCE_ID: catalogue-2
    depends_on:
      produits-db:
        condition: service_healthy
    volumes:
      - ./service-catalogue:/app
    command: >
      sh -c "python manage.py migrate &&
             python load_data.py &&
             python manage.py runserver 0.0.0.0:8000"

  catalogue-service-3:
    build: ./service-catalogue
    ports:
      - "8007:8000"
    environment:
      POSTGRES_DB: produits_db
      POSTGRES_USER: produits_user
      POSTGRES_PASSWORD: produits_pass
      POSTGRES_HOST: produits-db
      POSTGRES_PORT: 5432
      INSTANCE_ID: catalogue-3
    depends_on:
      produits-db:
        condition: service_healthy
    volumes:
      - ./service-catalogue:/app
    command: >
      sh -c "python manage.py migrate &&
             python load_data.py &&
             python manage.py runserver 0.0.0.0:8000"

  inventaire-db:
    image: postgres:15
    environment:
      POSTGRES_DB: inventaire_db
      POSTGRES_USER: inventaire_user
      POSTGRES_PASSWORD: inventaire_pass
    ports:
      - "5435:5432"
    volumes:
      - inventaire_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "inventaire_user", "-d", "inventaire_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  inventaire-service:
    build: ./service-inventaire
    ports:
      - "8002:8000"
    networks:
      - default
    environment:
      POSTGRES_DB: inventaire_db
      POSTGRES_USER: inventaire_user
      POSTGRES_PASSWORD: inventaire_pass
      POSTGRES_HOST: inventaire-db
      POSTGRES_PORT: 5432
    depends_on:
      inventaire-db:
        condition: service_healthy
    volumes:
      - ./service-inventaire:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py loaddata initial_data.json &&
             python manage.py runserver 0.0.0.0:8000"

  commandes-db:
    image: postgres:15
    environment:
      POSTGRES_DB: commandes_db
      POSTGRES_USER: commandes_user
      POSTGRES_PASSWORD: commandes_pass
    ports:
      - "5436:5432"
    volumes:
      - commandes_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "commandes_user", "-d", "commandes_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  commandes-service:
    build: ./service-commandes
    ports:
      - "8003:8000"
    environment:
      POSTGRES_DB: commandes_db
      POSTGRES_USER: commandes_user
      POSTGRES_PASSWORD: commandes_pass
      POSTGRES_HOST: commandes-db
      POSTGRES_PORT: 5432
      PRODUCT_SERVICE_URL: http://catalogue-service-1:8000
      STOCK_SERVICE_URL: http://inventaire-service:8000
    depends_on:
      commandes-db:
        condition: service_healthy
      catalogue-service-1:
        condition: service_started
      inventaire-service:
        condition: service_started
    volumes:
      - ./service-commandes:/app
    command: >
      sh -c "python manage.py migrate &&
             python load_data.py &&
             python manage.py runserver 0.0.0.0:8000"

  supply-chain-db:
    image: postgres:15
    environment:
      POSTGRES_DB: supply_chain_db
      POSTGRES_USER: supply_chain_user
      POSTGRES_PASSWORD: supply_chain_pass
    ports:
      - "5437:5432"
    volumes:
      - supply_chain_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "supply_chain_user", "-d", "supply_chain_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  supply-chain-service:
    build: ./service-supply-chain
    ports:
      - "8004:8000"
    environment:
      POSTGRES_DB: supply_chain_db
      POSTGRES_USER: supply_chain_user
      POSTGRES_PASSWORD: supply_chain_pass
      POSTGRES_HOST: supply-chain-db
      POSTGRES_PORT: 5432
      STOCK_SERVICE_URL: http://inventaire-service:8000
    depends_on:
      supply-chain-db:
        condition: service_healthy
      inventaire-service:
        condition: service_started
    volumes:
      - ./service-supply-chain:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  ecommerce-db:
    image: postgres:15
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5438:5432"
    volumes:
      - ecommerce_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ecommerce_user", "-d", "ecommerce_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  ecommerce-service:
    build: ./service-ecommerce
    ports:
      - "8005:8005"
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
      POSTGRES_HOST: ecommerce-db
      POSTGRES_PORT: 5432
      CATALOGUE_SERVICE_URL: http://catalogue-service-1:8000
      INVENTAIRE_SERVICE_URL: http://inventaire-service:8000
      COMMANDES_SERVICE_URL: http://commandes-service:8000
    depends_on:
      ecommerce-db:
        condition: service_healthy
      catalogue-service-1:
        condition: service_started
      inventaire-service:
        condition: service_started
      commandes-service:
        condition: service_started
    volumes:
      - ./service-ecommerce:/app
      - ./lab7:/app/lab7
    command: >
      sh -c "python manage.py migrate &&
             python manage.py loaddata initial_data.json &&
             python manage.py runserver 0.0.0.0:8005"

  # Base de données pour le service Saga Orchestrator
  saga-db:
    image: postgres:15
    environment:
      POSTGRES_DB: saga_db
      POSTGRES_USER: saga_user
      POSTGRES_PASSWORD: saga_pass
    ports:
      - "5439:5432"
    volumes:
      - saga_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "saga_user", "-d", "saga_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kong API Gateway
  kong-database:
    image: postgres:15
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong_pass
    ports:
      - "5433:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong", "-d", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kong-migration:
    image: kong:3.6
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_pass
      KONG_PG_DATABASE: kong
    depends_on:
      kong-database:
        condition: service_healthy
    restart: "no"

  kong:
    image: kong:3.6
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong_pass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
    ports:
      - "8080:8000"   # Kong Gateway (proxy)
      - "8081:8001"   # Kong Admin API
      - "8444:8444"   # Kong Admin SSL
      - "8443:8443"   # Kong Proxy SSL
    volumes:
      - kong_logs:/tmp   # Logs Kong accessibles depuis l'hôte
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    restart: unless-stopped

  # Configuration automatique Kong
  kong-setup:
    image: curlimages/curl:latest
    volumes:
      - ./scripts/setup-kong.sh:/setup-kong.sh
    depends_on:
      - kong
    command: >
      sh /setup-kong.sh
    restart: "no"

  service-saga-orchestrator:
    build:
      context: ./service-saga-orchestrator
      dockerfile: Dockerfile
    container_name: service-saga-orchestrator
    ports:
      - "8009:8009"
    environment:
      DJANGO_SETTINGS_MODULE: saga_service.settings
      PYTHONPATH: /app
      DEBUG: "True"
      KONG_GATEWAY_URL: http://kong:8000
      SAGA_TIMEOUT: "30"
      MAX_RETRIES: "3"
      # Configuration de la base de données
      POSTGRES_DB: saga_db
      POSTGRES_USER: saga_user
      POSTGRES_PASSWORD: saga_pass
      POSTGRES_HOST: saga-db
      POSTGRES_PORT: 5432
    volumes:
      - ./service-saga-orchestrator:/app
    depends_on:
      saga-db:
        condition: service_healthy
      inventaire-service:
        condition: service_started
      commandes-service:
        condition: service_started
      kong:
        condition: service_started
    restart: unless-stopped
    networks:
      - default
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8009"

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  produits_data:
  commandes_data:
  supply_chain_data:
  inventaire_data:
  ecommerce_data:
  saga_data:
  kong_data:
  kong_logs:
