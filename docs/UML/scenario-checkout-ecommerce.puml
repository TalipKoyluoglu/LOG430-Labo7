@startuml scenario-checkout-ecommerce
title Scénario Checkout - Lab6 (Orchestrée) vs Lab7 (Chorégraphiée)

actor "Client Web" as Client
participant "Frontend E-commerce" as Frontend
participant "Kong Gateway" as Kong
participant "service-ecommerce:8005" as EcommerceService
participant "service-catalogue:8001" as CatalogueService
participant "service-commandes:8003" as Commandes
participant "service-inventaire:8002" as Inventaire
participant "Redis Streams (topic: ecommerce.checkout.events)" as Bus
participant "stock_reservation_worker" as WRes
participant "order_creation_worker" as WOrd
participant "stock_compensation_worker" as WComp

== Lab6 (Orchestrée) ==
Client -> Frontend : POST /checkout (synchrone)
Frontend -> Kong : /api/ecommerce/commandes/clients/{id}/checkout/
Kong -> EcommerceService : orchestré
EcommerceService -> Inventaire : vérifier puis diminuer stock
EcommerceService -> Commandes : créer vente
EcommerceService --> Client : 201/400 selon succès

== Lab7 (Chorégraphiée) ==
Client -> Frontend : POST /checkout/choreo (async)
Frontend -> Kong : /api/ecommerce/.../checkout/choreo/
Kong -> EcommerceService : 202 Accepted + checkout_id
EcommerceService -> Bus : publish CheckoutInitiated
WRes -> Bus : consume CheckoutInitiated
WRes -> Inventaire : diminuer-stock
WRes -> Bus : publish StockReserved | StockReservationFailed
WOrd -> Bus : consume StockReserved
WOrd -> Commandes : enregistrer-vente
WOrd -> Bus : publish OrderCreated, CheckoutSucceeded | OrderCreationFailed
WComp -> Bus : consume OrderCreationFailed | StockReservationFailed
WComp -> Inventaire : augmenter-stock
WComp -> Bus : publish StockReleased, CheckoutFailed
@enduml 